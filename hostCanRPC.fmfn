/*
 * =====================================================
 * hostCanRPC
 * 
 * PARAMETERS:
 *	None
 *
 *
 * RETURNS:
 *	Returns boolean as defined by Claris FileMaker ( '1' for true or '0' for false ): 
 * 	- True signifies file is hosted and host version supports Remote Procedure Calls (i.e. 'Perform Script On Server')
 * 	- False signifies file is either local or host version **does not** support Remote Procedure Calls (i.e. 'Perform Script On Server')
 *
 *
 * DEPENDENCIES:
 * 	'GetMajorVersion' custom function
 *	( https://www.briandunning.com/cf/2202 | https://github.com/Automation-USA/custom-functions/blob/master/GetMajorVersion.fmfn )
 *
 * 	'GetMinorVersion' custom function 
 * 	( https://www.briandunning.com/cf/2203 | https://github.com/Automation-USA/custom-functions/blob/master/GetMinorVersion.fmfn )
 *
 *
 * 	Examples: 
 *
 *		hostCanRPC returns false when Get ( ConnectionState ) evaluates to 0 (file is local)
 *
 *		hostCanRPC returns false when file is hosted but host name is not "Server" or "Cloud"
 *
 *		hostCanRPC returns true when Get ( HostApplicationVersion ) evaluates to "Cloud"
 *
 *		hostCanRPC returns true when Get ( HostApplicationVersion ) evaluates to "Server 13.0.2" (or greater)
 *
 *		hostCanRPC returns false when Get ( HostApplicationVersion ) â‰¤ "Server 13.0.1"  (earliest reliable implementation of 'PerformScriptOnServer' in FileMaker Server begins with version 13.0.2)
 *
  *
 * KNOWN ISSUES:
 * 	None
 *
 * NOTES:
 * 	None
 *
 * RELEASE:
 * 	2019-08-25 - Initial release by Julio Toledo, Automation USA LLC ( www.automationusa.net )
 *
 * =====================================================
*/


Case ( 

	Get ( ConnectionState ) = 0 ; False ; 

	Get ( ConnectionState ) > 0 ; 

		Let ( 

			[

				host = Get ( HostApplicationVersion ) ; 

				major = GetMajorVersion ( host );

				minor = GetMinorVersion ( host ) ;

				absMinor = Abs ( Filter ( minor ; "0123456789" ) ) ;

				result = Case ( 

					PatternCount ( host ; "Cloud" ) ; True ; 

					PatternCount ( host ; "Server" ) ; 

						Case ( 

							major = 13 and absMinor > 1 ; True ;

							major > 13 ; True ;

							//defaultResult
							False

						); 
						//end inner Case

					//defaultResult
					False 

				) 
				//end outer Case

			];

			//calculation
			result
		)

)